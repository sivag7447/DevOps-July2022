Java Language 
---------------



Developer write code --- Github repo(Browser )
git 

sourcetree 

git bash

----------------------------


c -language ------c -compiler ----- Binray files 


Java code files 10---- java compiler ---10  .Class file (binray files ) 


10 Java ---10 .class

login 100 java fiels ---- 100 .class fiels login 

logout --100 files ---100 .class
payment -100

total -- 300 java code files --- 300 .class files -----zip file of .class files/  zip/package/archive  .class files ------Java archive ---Jar-- 

100000 ,1L  

Maven -- compilation /Build tool /packaging tool / report to the user / documentation 

--------------------      

How to install maven -open source 

Apache 

set JAVA_HOME=%PROGRAMFILES%\Java\jdk-11.0.2



C:\Users\ruths\Documents\softwares\jdk-11.0.8.10-hotspot\bin

/c/Program Files/OpenJDK/jdk-11.0.8.10-hotspot/bin/java
----------------------------

mvn clean   -11 set
mvn clean --1s 



git hub --browser ----clone --- local machine 


Downloading from central---maven hub browser   ----mvn clean -   storing in local (Home folder .m2)

mvn clean 


jre --java runtime env

jdk --java development kit 


5min ---7:03 PM

----------------------------------------
Maven :

1.compilation tool 

2. packaging tool 

3. documentaion 

4. 


-----------------

1.central repository (will store plugins )


2. Local storage /repository

(Home directory )


Plugin --Add on

pom.xml file 

project object model --pom 

1.. Home apache

2. what is your target --clean , package ,jar ,war 

3. what kind of test cases you use --- Junit 

4. what are the plugins 




Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

validate: validate the project is correct and all necessary information is available
compile: compile the source code of the project
test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package: take the compiled code and package it in its distributable format, such as a JAR.
integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.


clean --- validate --- compile --- test ---package ---- install 


https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
































































































